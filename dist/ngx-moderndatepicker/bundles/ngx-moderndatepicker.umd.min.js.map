{"version":3,"sources":["ng://ngx-moderndatepicker/lib/ngx-moderndatepicker.service.ts","ng://ngx-moderndatepicker/lib/ngx-moderndatepicker.component.ts","ng://ngx-moderndatepicker/lib/ngx-moderndatepicker.module.ts"],"names":["NgxModerndatepickerService","Injectable","args","providedIn","counter","isNil","value","NgxModerndatepickerComponent","elementRef","this","headless","isOpened","position","positions","onTouchedCallback","onChangeCallback","scrollOptions","barBackground","gridBackground","barBorderRadius","gridBorderRadius","barWidth","gridWidth","barMargin","gridMargin","prototype","setDisabledState","isDisabled","disabled","Object","defineProperty","innerValue","val","ngOnInit","view","date","Date","setOptions","initDayNames","initYears","initMonthName","indexOf","TypeError","join","ngOnChanges","changes","init","today","minYear","options","getYear","maxYear","displayFormat","barTitleFormat","dayNamesFormat","monthNamesFormat","barTitleIfEmpty","firstCalendarDay","locale","placeholder","addClass","addStyle","fieldId","defaultFieldId","useEmptyBarTitle","nextYear","addYears","prevYear","subYears","setDate","i","days","close","setYear","years","year","selectMonth","setMonth","isDateSelectable","minDateSet","minDate","maxDateSet","maxDate","timestamp","valueOf","isWeekendDay","Array","isArray","weekendsDay","getDay","isHoliday","holidayList","filter","day","isSameDay","length","_this","actualDate","start","startOfMonth","end","endOfMonth","eachDay","map","getDate","month","getMonth","inThisMonth","isToday","isSelected","isSameMonth","isSameYear","isSelectable","isWeekend","tmp","prevDays","subDays","unshift","displayValue","format","barTitle","range","from","x","isThisYear","isYearSelectable","getFullYear","dayNames","setDay","push","monthNames","currentDate","addMonths","name","isThisMonth","isMonthSelectable","toggleView","toggle","reset","fireValueChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","onBlur","e","input","nativeElement","querySelector","target","contains","container","classList","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Input","HostListener","NgxModerndatepickerModule","NgModule","declarations","imports","CommonModule","BrowserModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxModerndatepickerService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, ElementRef, HostListener, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport {\n  startOfMonth,\n  endOfMonth,\n  addMonths,\n  subMonths,\n  setYear,\n  eachDay,\n  getDate,\n  getMonth,\n  getYear,\n  isToday,\n  isSameDay,\n  isSameMonth,\n  isSameYear,\n  format,\n  getDay,\n  subDays,\n  setDay,\n  addYears,\n  subYears,\n  setMonth,\n  isWithinRange\n} from 'date-fns';\n\nexport type AddClass = string | string[] | { [k: string]: boolean } | null;\n\nexport interface DatepickerOptions {\n  minYear?: number; // default: current year - 30\n  maxYear?: number; // default: current year + 30\n  displayFormat?: string; // default: 'MMM D[,] YYYY'\n  barTitleFormat?: string; // default: 'MMMM YYYY'\n  dayNamesFormat?: string; // default 'ddd'\n  monthNamesFormat?: string; // default 'MMM'\n  barTitleIfEmpty?: string;\n  firstCalendarDay?: number; // 0 = Sunday (default), 1 = Monday, ..\n  locale?: object;\n  minDate?: Date;\n  maxDate?: Date;\n  /** Placeholder for the input field */\n  placeholder?: string;\n  /** [ngClass] to add to the input field */\n  addClass?: AddClass;\n  /** [ngStyle] to add to the input field */\n  addStyle?: { [k: string]: any } | null;\n  /** ID to assign to the input field */\n  fieldId?: string;\n  /** If false, barTitleIfEmpty will be disregarded and a date will always be shown. Default: true */\n  useEmptyBarTitle?: boolean;\n  weekendsDay?: number[];\n   /** Sunday is 0 , Highlights the weekends with gray background**/\n  holidayList?: Array<Date>;\n  /** List of Holidays **/\n}\n\n// Counter for calculating the auto-incrementing field ID\nlet counter = 0;\n\n/**\n * Internal library helper that helps to check if value is empty\n * @param value\n */\nconst isNil = (value: Date | DatepickerOptions) => {\n  return (typeof value === 'undefined') || (value === null);\n};\n\n@Component({\n  selector: 'ngx-moderndatepicker',\n  templateUrl: 'ngx-moderndatepicker.component.html',\n  styleUrls: ['ngx-moderndatepicker.component.scss'],\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => NgxModerndatepickerComponent), multi: true }\n  ]\n})\nexport class NgxModerndatepickerComponent implements OnInit {\n@Input() options: DatepickerOptions;\n\n  /**\n   * Disable datepicker's input\n   */\n  @Input() headless = false;\n\n  /**\n   * Set datepicker's visibility state\n   */\n  @Input() isOpened = false;\n\n  /**\n   * Datepicker dropdown position\n   */\n  @Input() position = 'bottom-right';\n\n  private positions = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\n\n  innerValue: Date;\n  displayValue: string;\n  displayFormat: string;\n  date: Date;\n  barTitle: string;\n  barTitleFormat: string;\n  barTitleIfEmpty: string;\n  minYear: number;\n  maxYear: number;\n  firstCalendarDay: number;\n  view: string;\n  years: { year: number; isThisYear: boolean }[];\n  dayNames: string[];\n  monthNames: Array<any>;\n  dayNamesFormat: string;\n  monthNamesFormat: string;\n  scrollOptions: any;\n  days: {\n    date: Date;\n    day: number;\n    month: number;\n    year: number;\n    inThisMonth: boolean;\n    isToday: boolean;\n    isSelected: boolean;\n    isSelectable: boolean;\n    isWeekend: boolean;\n    isHoliday: boolean;\n  }[];\n  locale: object;\n  placeholder: string;\n  addClass: AddClass;\n  addStyle: { [k: string]: any } | null;\n  fieldId: string;\n  useEmptyBarTitle: boolean;\n  disabled: boolean;\n\n  private onTouchedCallback: () => void = () => { };\n  private onChangeCallback: (_: any) => void = () => { };\n\n  public setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  get value(): Date {\n    return this.innerValue;\n  }\n\n  set value(val: Date) {\n    this.innerValue = val;\n    this.onChangeCallback(this.innerValue);\n  }\n\n  constructor(private elementRef: ElementRef) {\n    this.scrollOptions = {\n      barBackground: '#DFE3E9',\n      gridBackground: '#FFFFFF',\n      barBorderRadius: '3',\n      gridBorderRadius: '3',\n      barWidth: '6',\n      gridWidth: '6',\n      barMargin: '0',\n      gridMargin: '0'\n    };\n  }\n\n  ngOnInit() {\n    this.view = 'year';\n    this.date = new Date();\n    this.setOptions();\n    this.initDayNames();\n    this.initYears();\n    this.initMonthName();\n\n    // Check if 'position' property is correct\n    if (this.positions.indexOf(this.position) === -1) {\n      throw new TypeError(`ng-moderndatepicker: invalid position property value '${this.position}' (expected: ${this.positions.join(', ')})`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if ('options' in changes) {\n      this.setOptions();\n      this.initDayNames();\n      this.init();\n      this.initYears();\n    }\n  }\n\n  get defaultFieldId(): string {\n    // Only evaluate and increment if required\n    const value = `datepicker-${counter++}`;\n    Object.defineProperty(this, 'defaultFieldId', {value});\n\n    return value;\n  }\n\n  setOptions(): void {\n    const today = new Date(); // this const was added because during my tests, I noticed that at this level this.date is undefined\n    this.minYear = this.options && this.options.minYear || getYear(today) - 30;\n    this.maxYear = this.options && this.options.maxYear || getYear(today) + 30;\n    this.displayFormat = this.options && this.options.displayFormat || 'MMM D[,] YYYY';\n    this.barTitleFormat = this.options && this.options.barTitleFormat || 'YYYY';\n    this.dayNamesFormat = this.options && this.options.dayNamesFormat || 'ddd';\n    this.monthNamesFormat = this.options && this.options.monthNamesFormat || 'MMM';\n    this.barTitleIfEmpty = this.options && this.options.barTitleIfEmpty || 'Click to select a date';\n    this.firstCalendarDay = this.options && this.options.firstCalendarDay || 0;\n    this.locale = this.options && { locale: this.options.locale } || {};\n    this.placeholder = this.options && this.options.placeholder || '';\n    this.addClass = this.options && this.options.addClass || {};\n    this.addStyle = this.options && this.options.addStyle || {};\n    this.fieldId = this.options && this.options.fieldId || this.defaultFieldId;\n    this.useEmptyBarTitle = this.options && 'useEmptyBarTitle' in this.options ? this.options.useEmptyBarTitle : true;\n  }\n\n  nextYear(): void {\n    this.date = addYears(this.date, 1);\n    this.init();\n    this.initMonthName();\n\n  }\n\n  prevYear(): void {\n    this.date = subYears(this.date, 1);\n    this.init();\n    this.initMonthName();\n\n  }\n\n  setDate(i: number): void {\n    this.date = this.days[i].date;\n    this.value = this.date;\n    this.init();\n    this.close();\n  }\n\n  setYear(i: number): void {\n    this.date = setYear(this.date, this.years[i].year);\n    this.init();\n    this.view = 'year';\n  }\n\n  selectMonth(i: number): void {\n    this.date = setMonth(this.date,i);\n    this.init();\n    this.initMonthName();\n    this.view = 'year';\n  }\n  /**\n   * Checks if specified date is in range of min and max dates\n   * @param date\n   */\n  private isDateSelectable(date: Date): boolean {\n    if (isNil(this.options)) {\n      return true;\n    }\n\n    const minDateSet = !isNil(this.options.minDate);\n    const maxDateSet = !isNil(this.options.maxDate);\n\n    const timestamp = date.valueOf();\n\n    if (minDateSet && (timestamp < this.options.minDate.valueOf())) {\n      return false;\n    }\n\n    if (maxDateSet && (timestamp > this.options.maxDate.valueOf())) {\n      return false;\n    }\n\n    return true;\n  }\n\n  private isWeekendDay (date: Date): boolean {\n    const weekendsDay = Array.isArray(this.options.weekendsDay);\n    if(weekendsDay) {\n      return this.options.weekendsDay.indexOf(getDay(date)) != -1 ? true : false;\n    }\n\n    return false;\n  }\n\n  private isHoliday (date: Date): boolean {\n    const areHolidays = Array.isArray(this.options.holidayList);\n    if(areHolidays) {\n      return (this.options.holidayList.filter((day)=> isSameDay(day,date))).length ? true : false;\n    }\n\n    return false;\n  }\n\n  init(): void {\n    // this.date may be null after .reset(); fall back to current date.\n    const actualDate = this.date || new Date();\n    const start = startOfMonth(actualDate);\n    const end = endOfMonth(actualDate);\n\n    this.days = eachDay(start, end).map(date => {\n      return {\n        date: date,\n        day: getDate(date),\n        month: getMonth(date),\n        year: getYear(date),\n        inThisMonth: true,\n        isToday: isToday(date),\n        isSelected: isSameDay(date, this.innerValue) && isSameMonth(date, this.innerValue) && isSameYear(date, this.innerValue),\n        isSelectable: this.isDateSelectable(date),\n        isWeekend: this.isWeekendDay(date),\n        isHoliday: this.isHoliday(date)\n      };\n    });\n\n    const tmp = getDay(start) - this.firstCalendarDay;\n    const prevDays = tmp < 0 ? 7 - this.firstCalendarDay : tmp;\n\n    for (let i = 1; i <= prevDays; i++) {\n      const date = subDays(start, i);\n      this.days.unshift({\n        date: date,\n        day: getDate(date),\n        month: getMonth(date),\n        year: getYear(date),\n        inThisMonth: false,\n        isToday: isToday(date),\n        isSelected: isSameDay(date, this.innerValue) && isSameMonth(date, this.innerValue) && isSameYear(date, this.innerValue),\n        isSelectable: this.isDateSelectable(date),\n        isWeekend : this.isWeekendDay(date),\n        isHoliday: this.isHoliday(date)\n      });\n    }\n\n    if (this.innerValue) {\n      this.displayValue = format(this.innerValue, this.displayFormat, this.locale);\n      this.barTitle = format(start, this.barTitleFormat, this.locale);\n    } else {\n      this.displayValue = '';\n      this.barTitle = this.useEmptyBarTitle ? this.barTitleIfEmpty : format(start, this.barTitleFormat, this.locale);\n    }\n  }\n\n  initYears(): void {\n    const range = this.maxYear - this.minYear;\n    this.years = Array.from(new Array(range), (x, i) => i + this.minYear).map(year => {\n      return {\n        year: year,\n        isThisYear: year === getYear(this.date),\n        isToday : year === getYear(new Date()),\n        isSelectable: this.isYearSelectable(year)\n        };\n    });\n  }\n\n  private isYearSelectable(date: any) : boolean {\n     const minDate = isNil(this.options.minDate) ? false : this.options.minDate;\n     const maxDate = isNil(this.options.maxDate) ? false : this.options.maxDate;\n\n     if ( minDate && maxDate ) {\n       return minDate.getFullYear() <= date && date <= maxDate.getFullYear();\n     } else if (minDate) {\n       return  minDate.getFullYear() <= date;\n     } else if (maxDate) {\n        return  date <= maxDate.getFullYear();\n     }\n     return true;\n  }\n\n  initDayNames(): void {\n    this.dayNames = [];\n    const start = this.firstCalendarDay;\n    for (let i = start; i <= 6 + start; i++) {\n      const date = setDay(new Date(), i);\n      this.dayNames.push(format(date, this.dayNamesFormat, this.locale));\n    }\n  }\n\n  initMonthName(): void {\n    let monthNames = [];\n    let currentDate = new Date(this.date);\n    const start = subYears(currentDate.setMonth(11),1);\n    for (let i = 1; i <= 12 ; i++) {\n      const date = addMonths(start, i);\n      monthNames.push({\n        name: format(date, this.monthNamesFormat, this.locale),\n        isSelected: date.getMonth() === this.date.getMonth(),\n        isThisMonth: isSameMonth(date,new Date()) && isSameYear(this.date,new Date()),\n        isSelectable: this.isMonthSelectable(date)\n      });\n    }\n    this.monthNames = monthNames;\n  }\n\n  private isMonthSelectable(date: Date): boolean {\n\n      const minDate = isNil(this.options.minDate) ? false : this.options.minDate;\n      const maxDate = isNil(this.options.maxDate) ? false : this.options.maxDate;\n\n      if ( minDate && maxDate ) {\n        if(minDate.getFullYear() < date.getFullYear() && date.getFullYear() < maxDate.getFullYear()){\n            return true;\n        } else if (minDate.getFullYear() < date.getFullYear() && date.getFullYear() == maxDate.getFullYear()){\n            if(date.getMonth() <= maxDate.getMonth()){\n              return true;\n            } else { return false;}\n        } else if (minDate.getFullYear() == date.getFullYear() && date.getFullYear() < maxDate.getFullYear()){\n            if(minDate.getMonth() <= date.getMonth()){\n              return true;\n            } else { return false;}\n        } else if (minDate.getFullYear() == date.getFullYear() && date.getFullYear() == maxDate.getFullYear()){\n            if(minDate.getMonth() <= date.getMonth() && date.getMonth() <= maxDate.getMonth()){\n              return true;\n            } else { return false;}\n        } else {\n             return false;\n        }\n      } else if (minDate) {\n        if(minDate.getFullYear() < date.getFullYear()){\n            return true;\n        } else if (minDate.getFullYear() == date.getFullYear()){\n            if(minDate.getMonth() <= date.getMonth()){\n              return true;\n            } else { return false;}\n        } else {\n             return false;\n        }\n      } else if (maxDate) {\n         if(date.getFullYear() < maxDate.getFullYear()){\n             return true;\n         } else if (date.getFullYear() == maxDate.getFullYear()){\n             if(date.getMonth() <= maxDate.getMonth()){\n               return true;\n             } else { return false;}\n         } else {\n              return false;\n         }\n      }\n\n    return true;\n  }\n\n  toggleView(): void {\n    this.view = this.view === 'year' ? 'years' : 'year';\n  }\n\n  toggle(): void {\n    this.isOpened = !this.isOpened;\n\n    if (!this.isOpened && this.view === 'years') {\n      this.toggleView();\n    }\n  }\n\n  close(): void {\n    this.isOpened = false;\n\n    if (this.view === 'years') {\n      this.toggleView();\n    }\n  }\n\n  reset(fireValueChangeEvent = false): void {\n    this.date = null;\n    this.innerValue = null;\n    this.init();\n    if (fireValueChangeEvent && this.onChangeCallback) {\n      this.onChangeCallback(this.innerValue);\n    }\n  }\n\n  writeValue(val: Date) {\n    if (val) {\n      this.date = val;\n      this.innerValue = val;\n      this.init();\n      this.displayValue = format(this.innerValue, this.displayFormat, this.locale);\n      this.barTitle = format(startOfMonth(val), this.barTitleFormat, this.locale);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: any) {\n    this.onTouchedCallback = fn;\n  }\n\n  @HostListener('document:click', ['$event']) onBlur(e: MouseEvent) {\n    if (!this.isOpened) {\n      return;\n    }\n\n    const input = this.elementRef.nativeElement.querySelector('.ngx-moderndatepicker-input');\n\n    if (input == null) {\n      return;\n    }\n\n    if (e.target === input || input.contains(<any>e.target)) {\n      return;\n    }\n\n    const container = this.elementRef.nativeElement.querySelector('.ngx-moderndatepicker-calendar-container');\n    if (container && container !== e.target && !container.contains(<any>e.target) && !(<any>e.target).classList.contains('year-unit') && !(<any>e.target).classList.contains('month-unit')) {\n      this.close();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\n\nimport { NgxModerndatepickerComponent } from './ngx-moderndatepicker.component';\n\n\n@NgModule({\n  declarations: [NgxModerndatepickerComponent],\n  imports: [\n   CommonModule,\n   BrowserModule,\n   FormsModule\n  ],\n  exports: [NgxModerndatepickerComponent]\n})\nexport class NgxModerndatepickerModule { }\n"]}